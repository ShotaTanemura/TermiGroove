{
  "id": "snapshot_1759018214235_f50ihdl36",
  "approvalId": "approval_1759018214227_hy49vpmz1",
  "approvalTitle": "Tech steering doc for TermiGroove",
  "version": 1,
  "timestamp": "2025-09-28T00:10:14.235Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Technology Stack\n\n## Project Type\nTerminal-based music workstation and live looping instrument built as a cross-platform CLI/TUI application.\n\n## Core Technologies\n\n### Primary Language(s)\n- **Language**: Rust 2024 Edition\n- **Runtime/Compiler**: rustc 1.89.0 (rust-toolchain pinned)\n- **Language-specific tools**: Cargo for build/test, rustfmt, clippy\n\n### Key Dependencies/Libraries\n- **ratatui 0.29**: Terminal UI rendering framework\n- **crossterm 0.27**: Cross-platform terminal input/output backend\n- **tui-popup 0.6**: Modal dialog rendering within ratatui\n- **tui-input 0.14**: Text input field handling for the popup editor\n- **ratatui-explorer (git)**: File explorer widget for browsing sample directories\n- **rodio 0.18 / CPAL**: Audio playback stack for mixing and streaming samples\n- **anyhow 1**: Error handling with context\n- **@microsoft/tui-test**: Node-based end-to-end testing harness\n\n### Application Architecture\nModular monolith with dedicated modules for state management (`app_state`), audio engine (`audio`), user input handling (`input`), selection/file models (`selection`), and rendering (`ui`). Follows an event-driven loop pulling terminal events, updating state, and re-rendering frames.\n\n### Data Storage (if applicable)\n- **Primary storage**: In-memory structures; audio files read from local filesystem on demand\n- **Caching**: None beyond process memory\n- **Data formats**: WAV/MP3 sample files; internal structs and enums\n\n### External Integrations (if applicable)\n- **APIs**: None\n- **Protocols**: Terminal I/O (stdin/stdout), audio device access via CPAL\n- **Authentication**: Not applicable\n\n### Monitoring & Dashboard Technologies (if applicable)\n- **Dashboard Framework**: ratatui widgets for on-terminal dashboards\n- **Real-time Communication**: Local render loop; potential future websocket bridge\n- **Visualization Libraries**: ratatui built-ins, custom widgets, ASCII meters\n- **State Management**: Central `AppState` struct\n\n## Development Environment\n\n### Build & Development Tools\n- **Build System**: Cargo\n- **Package Management**: Cargo (Rust), npm (Node e2e tools)\n- **Development workflow**: Tight TDD loop with specs; manual cargo runs for interactive testing\n\n### Code Quality Tools\n- **Static Analysis**: `cargo clippy`\n- **Formatting**: `cargo fmt`\n- **Testing Framework**: `cargo test` (unit/integration), `npm run test:e2e` with @microsoft/tui-test\n- **Documentation**: `cargo doc` (on demand)\n\n### Version Control & Collaboration\n- **VCS**: Git\n- **Branching Strategy**: Feature branches with PRs to mainline (per workflow notes)\n- **Code Review Process**: Spec-driven approvals; documented decision logs, GitHub PRs\n\n### Dashboard Development (if applicable)\n- **Live Reload**: Terminal redraw via event loop; no hot reload\n- **Port Management**: Not applicable\n- **Multi-Instance Support**: Multiple terminals possible; no shared state\n\n## Deployment & Distribution (if applicable)\n- **Target Platform(s)**: macOS primary, Linux and Windows supported via CPAL/crossterm\n- **Distribution Method**: Source build via Cargo; future binaries possible\n- **Installation Requirements**: Rust toolchain 1.89+, Node 18+ for e2e tests\n- **Update Mechanism**: Git pull and rebuild\n\n## Technical Requirements & Constraints\n\n### Performance Requirements\n- Sub-10ms input-to-audio latency for pad triggering\n- Stable audio playback with zero pops/clicks during BPM changes\n- Terminal rendering responsive at 20â€“60 FPS target\n\n### Compatibility Requirements  \n- **Platform Support**: macOS 14 (primary), Linux, Windows (targeted via CPAL)\n- **Dependency Versions**: ratatui 0.29, crossterm 0.27, rodio 0.18, tui-input 0.14, @microsoft/tui-test ^0.0.1-rc.5\n- **Standards Compliance**: Follow Rust edition idioms, CPAL audio interfaces\n\n### Security & Compliance\n- **Security Requirements**: Local-only app; ensure safe file handling and avoid executing untrusted content\n- **Compliance Standards**: None formal; respect user privacy by avoiding telemetry\n- **Threat Model**: Minimal attack surface; guard against malformed audio files causing crashes\n\n### Scalability & Reliability\n- **Expected Load**: Single user sessions, 8 concurrent tracks\n- **Availability Requirements**: High reliability during live sets; deterministic behavior under stress\n- **Growth Projections**: Future remote collaboration may require networking layer\n\n## Technical Decisions & Rationale\n1. **Rust + ratatui for TUI**: Provides performance, safety, and expressive terminal rendering; alternatives like Python curses lacked performance.\n2. **CPAL/Rodio audio stack**: Cross-platform audio with low-level control, enabling precise looping and mixing.\n3. **Strict TDD workflow**: Ensures confidence for live performance features and aligns with Notion-driven spec process.\n\n## Known Limitations\n- **Headless Audio Dependencies**: Virtual audio setup required for CI; configuration complexity exists.\n- **Single-Process Architecture**: No remote collaboration yet; scaling to multi-user requires new infrastructure.\n- **File Format Scope**: Currently optimized for WAV/MP3; other formats unsupported until future work.\n",
  "fileStats": {
    "size": 5142,
    "lines": 102,
    "lastModified": "2025-09-28T00:08:34.775Z"
  },
  "comments": []
}