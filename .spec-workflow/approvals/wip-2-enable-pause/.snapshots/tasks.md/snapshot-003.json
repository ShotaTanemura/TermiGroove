{
  "id": "snapshot_1760157769850_wvdzlrve7",
  "approvalId": "approval_1759940317910_kab1engeg",
  "approvalTitle": "Task 4 – Audio command plumbing for PauseAll",
  "version": 3,
  "timestamp": "2025-10-11T04:42:49.850Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Tasks Document (TDD-driven variant)\n\n- [x] 1. Pause/resume behavior matrix (TDD pre-step)\n  - File: docs/tdd/wip-2-enable-pause/behavior-matrix.md\n  - Capture exhaustive Given/When/Then cases for pausing and resuming from `LoopState::Playing`, `LoopState::Recording`, and regression paths where pause must not trigger.\n  - Identify timing tolerances (≤1 ms) and clarify open questions about audio sink interaction.\n  - Purpose: Define done criteria before touching code.\n  - _Leverage: requirements.md, design.md, existing tests in `tests/loop_engine/loop_pause_resume.rs`_\n  - _Requirements: 1, 2, 3_\n  - _Prompt: Implement the task for spec wip-2-enable-pause, first run spec-workflow-guide to get the workflow guide then implement the task: Role: TDD Analyst for real-time audio systems | Task: Build a behavior matrix covering pause/resume happy paths, overdub cases, and regression guards | Restrictions: No code edits; document-only; note unresolved questions | _Leverage: `.spec-workflow/specs/wip-2-enable-pause/requirements.md`, `.spec-workflow/specs/wip-2-enable-pause/design.md`, `tests/loop_engine/loop_pause_resume.rs` | _Requirements_: Requirement 1, Requirement 2, Requirement 3 | Success: Matrix enumerates all user story acceptance criteria, includes regression rows, and is stored at docs/tdd/wip-2-enable-pause/behavior-matrix.md | Instructions: Before starting, mark this task as in progress `[-]` in tasks.md; when finished, update to `[x]`._\n\n- [x] 2. Red test: loop engine pause snapshot coverage\n  - File: tests/loop_engine/loop_pause_resume.rs (extend)\n  - Add unit tests asserting offsets captured for both playback and overdub, plus regression test confirming non-pause inputs do not enter `LoopState::Paused`.\n  - Purpose: Drive implementation of snapshot struct and guard conditions.\n  - _Leverage: docs/tdd/wip-2-enable-pause/behavior-matrix.md, existing mocks in test file_\n  - _Requirements: 1, 2, 3_\n  - _Prompt: Implement the task for spec wip-2-enable-pause, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Rust TDD Engineer | Task: Extend unit tests in `tests/loop_engine/loop_pause_resume.rs` to cover pause snapshot persistence and regression cases | Restrictions: Keep tests deterministic; no production code edits | _Leverage: behavior matrix, existing FakeClock/AudioBusMock utilities | _Requirements_: Requirement 1, Requirement 2, Requirement 3 | Success: New tests fail because production code lacks pause snapshot support | Instructions: Mark this task as `[-]` when you start and `[x]` once tests are written._\n\n- [x] 3. Green: implement loop engine pause snapshot\n  - File: src/state/loop_engine.rs (or module defining `LoopEngine`)\n  - Introduce `PauseSnapshot` data, extend `LoopState::Paused`, modify `handle_space` branches to save offsets, emit `PauseAll`, and restore timers on resume.\n  - Update state invariants and ensure idempotency on repeated pause presses.\n  - Purpose: Make new loop engine tests pass.\n  - _Leverage: tests/loop_engine/loop_pause_resume.rs, docs/tdd/wip-2-enable-pause/behavior-matrix.md_\n  - _Requirements: 1, 2_\n  - _Prompt: Implement the task for spec wip-2-enable-pause, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Real-time Rust engineer | Task: Update `LoopEngine` to capture pause snapshots, emit `PauseAll`, and resume accurately | Restrictions: Keep changes minimal; maintain existing API surface; ensure clippy passes | _Leverage: new tests, design.md | _Requirements_: Requirement 1, Requirement 2 | Success: Tests from Task 2 pass and state transitions remain deterministic | Instructions: Mark task `[-]` at start, `[x]` when production code and tests pass._\n\n- [x] 4. Audio command plumbing for PauseAll\n  - File: src/audio.rs, src/audio/bus.rs (or equivalents)\n  - Add `AudioCommand::PauseAll`, implement handling in audio thread loop, ensure `AudioBus` exposes `pause_all()`.\n  - Update mocks and channel senders to support new command.\n  - Purpose: Allow loop engine to communicate pause to audio thread.\n  - _Leverage: behavior matrix, design.md, existing audio command patterns_\n  - _Requirements: 1_\n  - _Prompt: Implement the task for spec wip-2-enable-pause, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Audio pipeline engineer | Task: Extend audio command pipeline with `PauseAll` handling and tests | Restrictions: Maintain thread safety; reuse existing command queue; ensure tests cover new command | _Leverage: `src/audio.rs`, audio unit tests, behavior matrix | _Requirements_: Requirement 1 | Success: Audio unit tests cover PauseAll and loop engine can invoke `pause_all()` | Instructions: Update status markers when starting/completing._\n\n- [x] 5. Integration: pause/resume across engine and audio\n  - File: tests/integration/loop_pause_resume.rs (create) or extend existing integration test directory\n  - Simulate live loop with pause/resume ensuring audio commands fire appropriately and drift ≤1 ms.\n  - Purpose: Validate end-to-end behavior across modules.\n  - _Leverage: docs/tdd/wip-2-enable-pause/behavior-matrix.md, loop engine tests_\n  - _Requirements: 1, 2_\n  - _Prompt: Implement the task for spec wip-2-enable-pause, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Integration tester | Task: Add integration coverage that asserts PauseAll command path and resume alignment | Restrictions: Use existing mocks/fakes; avoid flakiness | _Leverage: newly added PauseAll plumbing, FakeClock patterns | _Requirements_: Requirement 1, Requirement 2 | Success: Integration test fails before implementation and passes after Tasks 3–4 | Instructions: Follow status marker instructions._\n\n- [x] 6. Regression guards and UX feedback\n  - File: tests/input_handling_tests.rs, src/input.rs, src/ui.rs\n  - Add regression test ensuring non-pause shortcuts do not emit pause commands.\n  - Ensure UI displays paused state feedback and update documentation snippet.\n  - Purpose: Satisfy Requirement 3 usability clause.\n  - _Leverage: behavior matrix, design.md_\n  - _Requirements: 3_\n  - _Prompt: Implement the task for spec wip-2-enable-pause, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Input & UI engineer | Task: Add regression tests for non-pause flows and ensure UI shows paused status | Restrictions: No new global state; keep UI changes minimal | _Leverage: input handling tests, UI rendering patterns | _Requirements_: Requirement 3 | Success: Regression tests pass and paused indicator renders correctly | Instructions: Update status markers accordingly._\n\n- [ ] 7. Documentation & decision log update\n  - File: docs/user-guide/controls.md (or existing controls doc), .spec-workflow/specs/wip-2-enable-pause/decision-log.md\n  - Document spacebar pause/resume behavior and summarize key implementation decisions.\n  - Purpose: Keep docs aligned with shipped behavior.\n  - _Leverage: requirements.md, design.md, completed tasks_\n  - _Requirements: 1, 2, 3_\n  - _Prompt: Implement the task for spec wip-2-enable-pause, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Technical writer | Task: Update user controls doc and decision log with pause/resume summary | Restrictions: No code changes; keep decision log structured | _Leverage: final implementation diff, spec docs | _Requirements_: Requirement 1, Requirement 2, Requirement 3 | Success: Documentation refreshed and decision log records final architecture choices | Instructions: Mark task status while working._\n\n\n",
  "fileStats": {
    "size": 7633,
    "lines": 64,
    "lastModified": "2025-10-11T04:34:31.412Z"
  },
  "comments": []
}