{
  "id": "snapshot_1759764161928_9hqglklc6",
  "approvalId": "approval_1759764161919_9v6qbk4l5",
  "approvalTitle": "Design for spec wip-2-enable-pause",
  "version": 1,
  "timestamp": "2025-10-06T15:22:41.928Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Architecture Overview\n\nThe pause/resume feature augments three core layers: the loop engine, the audio command channel, and the UI state observers. The keyboard input handler already delegates to `LoopEngine::handle_space`; this function will orchestrate Pause/Resume. We introduce a `PauseAll` audio command that the audio thread consumes to halt sinks atomically. `LoopEngine` records the precise offsets needed to resume playback/recording without drift, while `AudioBus` propagates the pause command to the audio thread. UI remains a passive observer, reacting to state changes in `AppState`.\n\n## Module-Level Changes\n\n### `src/audio.rs`\n- Extend `AudioCommand` enum with `PauseAll` variant carrying no payload.\n- Update the audio processing loop to handle `PauseAll`: iterate sinks atomically, pausing each stream and pruning finished ones.\n- Ensure pause handling is thread-safe; commands should be processed in the same channel as other audio commands to preserve ordering.\n\n### `src/audio/bus.rs` (or equivalent)\n- Add `pause_all()` helper that enqueues the `PauseAll` command.\n- Ensure existing senders derive from `SenderAudioBus` (or similar) to minimize duplicated code.\n- Update mocks/test harnesses to recognize the new command.\n\n### `src/loop_engine.rs`\n- Enhance `handle_space` to branch by current `LoopState`.\n    - When `Playing`, store playback cycle offset, emit `PauseAll`, and transition to `LoopState::Paused { saved_offset, loop_length, was_recording: false }`.\n    - When `Recording`, store both playback offset and overdub start offset, stop scheduling additional overdub events, emit `PauseAll`, and transition to `Paused` capturing recording metadata.\n    - When `Paused`, compute `cycle_start` from saved offset, restore overdub timing if `was_recording`, send resume commands (likely `StartAll`/existing playback scheduling), and transition back to `Playing`/`Recording`.\n- Introduce helper structs to capture pause snapshot (e.g., `PauseSnapshot { playback_offset_ms, overdub_offset_ms, was_recording }`).\n- Maintain idempotency: repeated pause presses in `Paused` should be ignored.\n\n### `src/input.rs`\n- Confirm `handle_space` path integrates with new pause logic (may only require ensuring event dispatch still occurs).\n- Add guard so non-pause flows continue unaffected.\n\n### `src/ui.rs` / App state observers\n- Reflect paused state visually (e.g., highlight or status text) leveraging existing state watchers.\n\n## Data Structures & State Management\n\n- `LoopState::Paused` variant should carry stored offsets and whether recording was active, enabling resume logic.\n- App state may require new fields for pause metadata (e.g., `pause_snapshot: Option<PauseSnapshot>`).\n- Ensure state transitions maintain invariants: `Paused` only entered from `Playing` or `Recording`.\n\n## Thread & Concurrency Considerations\n\n- `PauseAll` command must execute on the audio thread to avoid cross-thread race conditions.\n- Pause/resume should reuse existing channels; ensure no blocking operations inside audio loop.\n- If `PauseAll` arrives while sinks already stopped, the handler should no-op safely.\n\n## Testing Strategy\n\n### Unit Tests\n- `audio` module: verify `PauseAll` pauses active sinks and leaves queue clean.\n- `loop_engine` tests: simulate playing/recording transitions, ensure offsets captured and restored.\n- `input` tests: confirm non-pause interactions do not emit `PauseAll`.\n\n### Integration Tests\n- Scenario: start playback, pause via space, assert engine state `Paused` and offsets stored.\n- Resume scenario: after pause, pressing space resumes playback aligned within ≤1 ms.\n- Regression scenario: simulate other keyboard flows ensuring no pause triggered.\n\n### Manual/End-to-End Tests\n- With sample set, run actual terminal session, trigger pause/resume, confirm audio artifacts absent.\n\n## Rollout & Monitoring\n\n- Add logging around pause/resume state transitions (debug-level) for troubleshooting.\n- Document new behavior in user docs once feature ships.\n- Monitor test suite for new coverage ensuring pause/resume cannot regress silently.\n",
  "fileStats": {
    "size": 4109,
    "lines": 66,
    "lastModified": "2025-10-06T15:21:26.003Z"
  },
  "comments": []
}